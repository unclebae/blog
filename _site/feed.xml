<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unclebae 블로그</title>
    <description>&quot;Yesterday is history, Tomorrow is mistery, But Today is Gift. 
    That is why call it Present. 
    -- KungFu Panda -- &quot;
</description>
    <link>http://unclebae.github.io/</link>
    <atom:link href="http://unclebae.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 Jul 2016 11:18:46 +0900</pubDate>
    <lastBuildDate>Fri, 22 Jul 2016 11:18:46 +0900</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 21 Jul 2016 14:37:11 +0900</pubDate>
        <link>http://unclebae.github.io/jekyll/update/2016/07/21/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://unclebae.github.io/jekyll/update/2016/07/21/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>GFM 사용 테스트</title>
        <description>&lt;p&gt;GFM은
—
다음과
같이
&amp;gt;사용이
»가능합니다.
&amp;gt;###어렵지 않습니다.
코드 표현방법
————-
“&lt;code class=&quot;highlighter-rouge&quot;&gt;
var i = 0
“&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;var foo = “bar”&lt;/p&gt;
&lt;html&gt; &lt;/html&gt;
&lt;p&gt;##리스트 표현방법
+ 플러스
* 별
– 하이픈
###숫자리스트
1. 숫자
1. 숫자
### 링크
&lt;a href=&quot;teragoon.wordpress.com&quot;&gt;블로그&lt;/a&gt;
#주의
	1. 이렇게 해야합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;“`
var i = 0;
“`
2. 이건 안됩니다.

var i = 0;
* 숫자 리스트로 하면 숫자가 유지됩니다.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 +0900</pubDate>
        <link>http://unclebae.github.io/2016/07/21/testMarkdown.html</link>
        <guid isPermaLink="true">http://unclebae.github.io/2016/07/21/testMarkdown.html</guid>
        
        
      </item>
    
      <item>
        <title>python regular exp</title>
        <description>&lt;h1 id=&quot;python-re---perl--regular-expression&quot;&gt;python은 re를 이용하며 이는 Perl 스타일의 regular-expression이다.&lt;/h1&gt;
&lt;p&gt;# re모듈은 처리를 수행하다가 예외가 발생하면 re.error이 raise된다.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;기본 패턴&lt;/h1&gt;
&lt;p&gt;# a, X, 9, &amp;lt;
#  - 일반적인 캐릭터로 그 자체로 매칭이 되는지 검사한다.
# . (a period)
#  - 뉴라인 ‘\n’을 제외한 한 문자 캐릭터와 매치된다.
# \w
#  - “word”에 해당하는 캐릭터를 매치한다. letter 혹은, digit혹은 underbar등이 해당된다.
#  - 이는 [a-zA-Z0-9_] 에 해당한다.
# \W
#  - word가 아닌것에 대해서 매치한다.
# \b
#  - 단어와 비 단어 사이의 영역이다.
# \s
#  - 단일 공백 문자와 매치하는지 검사한다. 공백, 뉴라인, 리턴, 탭 이 속한다.
# \S
#  - 공백문자가 아닌것과 매치하는지 검사한다.
# \t, \n, \r
#  - 탭, 뉴라인, 리턴 에 해당한다.
# \d
#  - decimal digit [0-9]를 의미한다.
# ^
#  - 해당 문자로 시작되는지 검사한다.
# $
#  - 해당 문자로 끝이 나는지 검사한다.
# \
#  - 특수 기능을 제거하여 매치 검사를 한다.&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;정규식 컴파일 플래그&lt;/h1&gt;
&lt;p&gt;# ASCII, A
#  - 몇가지 이스케이프 \w, \b\, \s, \d 와 같은특수 처리 문자를 단순 문자로 인식한다.
# DOTALL, S
#  - . 어떤 캐릭터 하나에 대한 매치를 만든다 new line 포함
# IGNORECASE, I
#  - 케이스에 상관없이 처리되도록 한다.
# LOCALE, L
#  - 로케일 인식한 매치를 한다.
# MULTILINE, M
#  - 멀티라인 매칭을 수행하도록 한다. 이는 ^와 $에 영향을준다.
# VERBOSE, X (확장용)
#  - verbose RE들을 이용하도록 한다. 이는 더 이하하기 쉽고 명확하게 해준다.&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;매치함수&lt;/h1&gt;
&lt;p&gt;# 매치 문법 :
# re.match(pattern, string, flags=0)
#   - pattern : 정규 표현식
#   - string : 스트링으로 매치될 대상이다.
#   - flags : 서로다른 플래그들을 조합하기 위해서 OR(|) 비트연산을 이용할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;rematch---match--none-&quot;&gt;re.match는 매치가 성공한경우 match객체를 반환한다. None인경우 실패한경우이다.&lt;/h1&gt;
&lt;p&gt;# 매치 그룹화
# group(num=0)
#  - 이 메소드는 전체 매치를 반환한다. (혹은 특정 하위 그룹의 수를 반환한다.)
# groups()
#  - 이 메소드는 모든 매치 서브 그룹을 반환한다.&lt;/p&gt;

&lt;h1 id=&quot;search-function&quot;&gt;search Function&lt;/h1&gt;
&lt;p&gt;# RE패턴의 첫번째로 발생되는 검색결과를 반환한다.
# 문법 :
# re.search(pattern, string, flags=0)&lt;/p&gt;

&lt;h1 id=&quot;pattern--&quot;&gt;- pattern : 정규표현식&lt;/h1&gt;
&lt;p&gt;#  - string : 스트링으로, 검사를 수행할 대상 문자열
#  - flags : 서로다른 플래그를 bit OR연산 (|)을 이용할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;search-and-replace&quot;&gt;Search and Replace&lt;/h1&gt;
&lt;p&gt;# 형식 :
# re.sub(pattern, repl, string, max=0)
# re메소드중에서 가장 중요한 것으로 대응 문자로 교체하는 작업을 수행한다.&lt;/p&gt;

&lt;h1 id=&quot;regular-expression-modifiers--option-flags&quot;&gt;Regular Expression Modifiers : Option Flags&lt;/h1&gt;
&lt;p&gt;# 정규식은 옵션 모디파이어를 제공한다. 이는 다양한 관점에서 매핑을 수행할 수 있도록 한다.
# 이는 OR연산을 통해서 해당 옵션 플래그를 복합적으로 이용할 수 있다.
# re.I
#  - 대/소문자를 가리지 않고 매핑한다.
# re.L
#  - 현재 로케일로 인터프리터 한다. 이 인터프리터는 알파벳 그룹에 영향을 준다. (\w와 \W),
#    그리고 (\b와 \B)와 함께 바운더리 내용과 같이 작업한다.
# re.M
#  - $가 라인의 끝을 매칭하도록 하고, ^는 라인의 시작을 의미하게 한다.
# re.S
#  - dot 표현식을 다른 어떤 캐릭터와 매핑되도록 설정한다. 뉴라인 포함.
# re.U
#  - 유니코드 캐릭터를 인터프리터 한다. 이 플래그는 \w, \W, \b, \B 의 행위에 영향을 준다.
# re.X
#  - “cuter” 정규식 문법을 허용한다. 이것은 공백을 무시하고, 이스케이프되지 않은 # 을 처리한다.&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;정규 표현식 패턴.&lt;/h1&gt;
&lt;p&gt;# ^
#  - 라인의 시작을 매칭한다.
# $
#  - 라인의 종료를 매칭한다.
# .
#  - 어떠한 하나의 캐릭터에 매칭하는지 확인한다. 뉴라인 캐릭터를 제외, m옵션을 이용하면 뉴라인도 허용된다.
# […]
#  - 괄호 내이 단일 캐릭터와 매칭되는지 검사한다.
# [^…]
#  - 괄호 내에 단일 캐릭터와 매칭되지 않은지 검사한다.
# re*
#  - re이후로 0 이상 발생한 내용을 확인한다.
# re+
#  - re이후로 한번 이상 발생한 내용을 확인한다.
# re?
#  - re이후의 값이 0, 1번 발생한 내용을 확인한다.
# re{n}
#  - re가 정확히 n번 방생하는지 확인한다.
# re{n, }
#  - re가 정확히 n번 이상 발생했는지 확인한다.
# re{n, m}
#  - re가 정확히 n에서 m까지 발생했는지 확인한다.
# a | b
#  - a혹은 b인지 확인한다.
# (re)
#  - 그룹 정규식을 지정하고 매치되는 텍스트를 기억한다.
# (?imx)
#  - 임시적으로 i, m, x옵션을 정규식에 대해서 토글 한다.
# (?-imx)
#  - 임시적으로 i, m, x 옵션을 정규식에 대해서 토글 오프한다.
#    만약 괄호안에 있다면 area에만 적용이 된다.
# (?: re)
#  - 그룹 정규식을 수행한다. 그러나 매치된 텍스트는 저장하지 않는다.
# (?imx: re)
#  - 임시적으로 i, m, x 옵션이 토글 되어진다.
# (?-imx: re)
#  - 임시적으로 i, m, x 옵션이 괄호안에 토글 오프된다.
# (?#…)
#  - 커멘트
# (?= re)
#  - 패턴을 이용하여 특정 위치를 지정한다. 그리고 범위는 존재하지 않는다.
# (?!re)
#  - 패턴이 아닌 것에 대한 특정 위치를 지정한다. 이것은 범위는 존재하지 않는다.
# (?&amp;gt;re)
#  - 백트래킹 없이 독립적인 패턴을 매치한다.
# \w
#  - word 캐릭터를 매치한다.
# \W
#  - word가 아닌 캐릭터를 매치한다.
# \s
#  - [\t\n\r\f]에 해당하는 공백을 매치한다.
# \S
#  - 비 공백과 매칭되는지 확인한다.
# \d
#  - digit과 매칭을 처리한다. 이는 [0-9]에 해당한다.
# \D
#  - nondigits 과 매칭을 처리한다.
# \A
#  - 스트링으로 시작하는지 매치 처리한다.
# \Z
#  - 스트링으로 끝나는건지 매칭한다.  만약 뉴라인이 존재한다면 뉴라인 전까지만 매치 처리한다.
# \z
#  - 스트링의 끝을 매치한다.
# \G
#  - 마지막 매치로 끝이 났는지 매치 포인트를 찾는다.
# \b
#  - 외부 브라켓을 하는경우 단어 바운더리를 매치한다. 내부 브라켓들안에서는 백스페이스 매치를 한다.
# \B
#  - 비단어 바운더리들을 매치한다.
# \n, \t, etc
#  - 뉴라인, 캐리지리턴, 탭등과 같은지 매치한다.
# \1..\9
#  - 그룹화된 하위 표현식의 n번째 매치를 한다.
# \10
#  - 만약 매치 된경우라면, n번째 그룹화된 하위 표현식을 매치한다. 그렇지 않으면 캐릭터 코드의 8진법을 표시한다.&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;정규 표현식 예제&lt;/h1&gt;
&lt;p&gt;# python : “python”과 매칭한다.&lt;/p&gt;

&lt;h1 id=&quot;character-classes&quot;&gt;Character classes&lt;/h1&gt;
&lt;p&gt;# [Pp]ython : “Python”과 “python”을 매치한다.
# rub[ye] : “ruby”과 “rube”를 매치한다.
# [aeiou] : “하나의 소문자 모음과 매치한다.”
# [0-9] : digit를 매치한다. 이는 [0123456789]와 같다.
# [a-z] : 소문자 아스키 영문자와 매치한다.
# [A-Z] : 대문자 아스키 영문자와 매치한다.
# [a-zA-Z0-9] : 상단 영문자, 숫자 모두 매치한다.
# [^aeiou] : 소문자 모음과 매치되지 않는 모든 문자를 매치한다.
# [^0-9] : 숫자가 아닌 모든 문자를 매치한다.&lt;/p&gt;

&lt;h1 id=&quot;special-character-classes&quot;&gt;Special Character Classes&lt;/h1&gt;
&lt;p&gt;# . : 뉴라인을 제외한 어떠한 문자와든 매치한다.
# \d : 숫자와 매치한다. [0-9]
# \D : 숫자가 아닌 부분만 매칭한다. [^0-9]
# \s : 공백 문자와 매치한다. [\t\r\n\f]
# \S : 공백이 아닌 문자와 매치한다. [^\t\r\n\f]
# \w : 하나의 단어와 매치되는지를 검사한다. [A-Za-z0-9_]
# \W : 단어가 아닌 문자와 매치되는지 검사한다. [^A-Za-z0-9_]&lt;/p&gt;

&lt;h1 id=&quot;repetition-cases&quot;&gt;Repetition Cases&lt;/h1&gt;
&lt;p&gt;# ruby? : rub 혹은 ruby와 매치한다. y는 옵션이다.
# ruby* : rub 에 0개 이상의 y를 매치한다.
# ruby+ : rub 에 1개 이상의 y를 매치한다.
# \d{3} : 정확하게 3개의 숫자를 매치한다.
# \d{3,} : 3개 이상의 숫자를 매치한다.
# \d{3,5} : 3개에서 5개의 숫자를 매치한다.&lt;/p&gt;

&lt;h1 id=&quot;nongreedy-repetition&quot;&gt;Nongreedy repetition&lt;/h1&gt;
&lt;p&gt;# 반복의 수중에서 최소수의 매치를 찾는다.
# &amp;lt;.*&amp;gt; : Greedy repetition: matches “&lt;python&gt;perl&amp;gt;&quot;
# &amp;lt;.*?&amp;gt; : Nongreedy: matches &quot;&lt;python&gt;&quot; in &quot;&lt;python&gt;perl&amp;gt;&quot;&lt;/python&gt;&lt;/python&gt;&lt;/python&gt;&lt;/p&gt;

&lt;h1 id=&quot;grouping-with-parentheses&quot;&gt;Grouping with Parentheses&lt;/h1&gt;
&lt;p&gt;# \D\d+ : 그룹이 없음 : + 는 \d를 반복한다.
# (\D\d)+ : 그룹이 설정됨 : +는 (\D\d) 쌍을 반복한다.
# ([Pp]ython(,)?)+ : “Python”, “Python, python, python”, 기타등등..&lt;/p&gt;

&lt;h1 id=&quot;backreferences&quot;&gt;Backreferences&lt;/h1&gt;
&lt;p&gt;# 이전에 매치된 그룹을 다시한번 매치되도록 한다.
# ([Pp])ython&amp;amp;\1ails : python&amp;amp;pails혹은 Python&amp;amp;pails와 매치한다.
# ([’”])[^\1]*\1 : 싱글 혹은 더블쿼터 스트링이다. \1은 첫번재 그룹 매치를 한다. \2는 두번째 그룹 매치를 수행한다.&lt;/p&gt;

&lt;h1 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h1&gt;
&lt;p&gt;# python|perl : “python”혹은 “perl” 매치를 한다.
# rub(y|le))  : “ruby” 혹은 “ruble” 매치한다.
# Python(!+|\?) : “Python” 으로 마지막에 하나 이상의 !혹은 하나의 ?와 매치한다.&lt;/p&gt;

&lt;h1 id=&quot;anchors&quot;&gt;Anchors&lt;/h1&gt;
&lt;p&gt;# 이것은 특정 매치 포지션을 지정하기 위해 필요하다.
# ^Python
#  - “Python”으로 시작되는지 검사한다.
# Python$
#  - “Python”으로 끝이 나는지 검사한다.
# \APython
#  - 스트링의 시작이 “Python”인지 검사한다.
# Python\Z
#  - 스트링이 “Python”으로 끝이 나는지 검사한다.
# \bPython\b
#  - 단어의 바운더리에서 Python으로 매치 되는지 검사한다.
# \brub\B
#  - \B는 비 단어 바운더리, “rube”, “ruby” 에서 “rub”와 매치를 검사한다. 그러나 “rub”아닌 것 매칭\&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 +0900</pubDate>
        <link>http://unclebae.github.io/2016/07/21/python-regex.html</link>
        <guid isPermaLink="true">http://unclebae.github.io/2016/07/21/python-regex.html</guid>
        
        
      </item>
    
      <item>
        <title>markdown</title>
        <description>&lt;h1 id=&quot;this-is-an-h1&quot;&gt;This is an H1&lt;/h1&gt;

&lt;h2 id=&quot;this-is-an-h2&quot;&gt;This is an H2&lt;/h2&gt;

&lt;h1 id=&quot;this-is-a-h1&quot;&gt;This is a H1&lt;/h1&gt;
&lt;p&gt;## This is a H2
### This is a H3
#### This is a H4
##### This is a H5
###### This is a H6&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a blockqute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;example-text&quot;&gt;Example Text&lt;/h1&gt;
&lt;p&gt;It’s very easy to make some words &lt;strong&gt;bold&lt;/strong&gt; and other words
&lt;em&gt;italic&lt;/em&gt; with Markdown. You can even [link to Google!]
(http://google.com)&lt;/p&gt;

&lt;h1 id=&quot;example-lists&quot;&gt;Example Lists&lt;/h1&gt;
&lt;p&gt;sometimes you want numbered lists:
1. One
2. Two
3. Three&lt;/p&gt;

&lt;p&gt;Sometimes you want bullet points:
* Start a line with a star
* Profit!&lt;/p&gt;

&lt;p&gt;Alternatively,
- Dashes work just as well
- And if you have points, put tow spaces before the dash or star:
  - Link this
  - And this&lt;/p&gt;

&lt;h1 id=&quot;example-images&quot;&gt;Example Images&lt;/h1&gt;
&lt;p&gt;If you want to embed images, this is how you do it:&lt;/p&gt;

&lt;p&gt;![Image Of Yaktocat]
(https://octodex.github.com/images/yaktocat.png)&lt;/p&gt;

&lt;h1 id=&quot;example-header-and-quotes&quot;&gt;Example Header and Quotes&lt;/h1&gt;
&lt;p&gt;# Strucutred document
Sometimes it’s useful to have different levels of headings to 
structure your documents. Start lines with a &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; to create headings.
Multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt; in a row denote smaller heading sizes.&lt;/p&gt;

&lt;h3 id=&quot;this-is-a-third-tier-heading&quot;&gt;This is a third-tier heading&lt;/h3&gt;
&lt;p&gt;You can use one &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; all the way up to &lt;code class=&quot;highlighter-rouge&quot;&gt;######&lt;/code&gt; six for different heading size&lt;/p&gt;

&lt;p&gt;If you’d like to quote someone, use the &amp;gt; character before the line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Coffee. The finest organic suspension ever devised… I beat the Borg with it.
- Caption Janeway&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;#Example Code
There are many different ways to style code with GitHub’s markdown.
If you have inline code blocks, wrap them in backticks: &lt;code class=&quot;highlighter-rouge&quot;&gt;var example = true&lt;/code&gt;.
If you’ve got a longer block of code, you can indent with four spaces:
    if (isAwesome) {
		return true
	}&lt;/p&gt;

&lt;p&gt;GitHub also supports something called code fencing, which allows for multiple lines without indentation:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
if (isAwesome) {
	return true
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And if you’d like to use syntax hjighlighting, include the language:
&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
if (isAwesome) {
	return true
}
&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-extras&quot;&gt;Example Extras&lt;/h1&gt;
&lt;p&gt;GitHub supports many extras in Markdown that help you reference and link to people.
If you ever want to direct a comment at someone, you can prefix their name with an @ symbol: Hey @kneath - love your sweater!&lt;/p&gt;

&lt;p&gt;But I have to admit, tasks lists are my faverite:
- [X] This is a complete item
- [ ] This is a incomplete item&lt;/p&gt;

&lt;p&gt;When you include a task list in the first commetn of an Issue, you will see a helpful progress bar in your list of issues.
It works in Pull Requests, too!&lt;/p&gt;

&lt;p&gt;And, of course emoji! :sparkles: :camel: :boom:&lt;/p&gt;

&lt;h2 id=&quot;syntax-guide&quot;&gt;Syntax guide&lt;/h2&gt;
&lt;p&gt;Here’s an overview of Markdown syntax that you can use anywhere on GitHub.com or in your own text files.&lt;/p&gt;

&lt;h2 id=&quot;headers&quot;&gt;Headers&lt;/h2&gt;
&lt;p&gt;# This is an &amp;lt;h1&amp;gt; tag
## This is an &amp;lt;h2&amp;gt; tag
###### This is an &amp;lt;h6&amp;gt; tag&lt;/p&gt;

&lt;h2 id=&quot;emphasis&quot;&gt;Emphasis&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This text will be italic&lt;/em&gt;
&lt;em&gt;This will also be italic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This text will be bold&lt;/strong&gt;
&lt;strong&gt;This will also be bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You &lt;strong&gt;can&lt;/strong&gt; combine them&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;
&lt;p&gt;### Unordered&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item1&lt;/li&gt;
  &lt;li&gt;Item2
    &lt;ul&gt;
      &lt;li&gt;Item2a&lt;/li&gt;
      &lt;li&gt;Item2b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ordered&quot;&gt;Ordered&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Item1&lt;/li&gt;
  &lt;li&gt;Item2&lt;/li&gt;
  &lt;li&gt;Item3
    &lt;ul&gt;
      &lt;li&gt;Item3a&lt;/li&gt;
      &lt;li&gt;Item3b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/logo.png&quot; alt=&quot;GitHub Logo&quot; /&gt;
Format: &lt;img src=&quot;url&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;
&lt;p&gt;http://github.com - automatic!
&lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h3&gt;
&lt;p&gt;As Kanye West said:
&amp;gt; We’re living the future so
&amp;gt; the present is our past.&lt;/p&gt;

&lt;h3 id=&quot;inline-code&quot;&gt;Inline code&lt;/h3&gt;
&lt;p&gt;I think you should use an
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; element here instead.&lt;/p&gt;

&lt;h1 id=&quot;github-flavored-markdown&quot;&gt;GitHub Flavored Markdown&lt;/h1&gt;
&lt;p&gt;GitHub.com uses its own version of Markdown syntax that provides an additional set fo useful features, many of which
make it easier to work with content on GitHub.com&lt;/p&gt;

&lt;p&gt;Note that some features of GitHub Flavored Markdown are only available in the descriptions and comments
of Issues and Pull Requests.
this include @mentions as well as references to S/HA-1 hashes, Issues, and Pull Requests.&lt;/p&gt;

&lt;p&gt;Task LIsts are also available in Gist commetns and in Gist markdown files.&lt;/p&gt;

&lt;h2 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;/h2&gt;

&lt;p&gt;Here’s an example of how you can use syntax highlighting with GitHub Flavored Markdown:
```javascript
function fancyAlert(arg) {
	if (arg) {
		$.facebook({div:’#foo’})
	}
}&lt;/p&gt;

&lt;p&gt;You can also simply indent your code by four spaces;
function fancyAlert(arg) {
	if (arg) {
	    $.facebox({div:’#foo’})
	}
}&lt;/p&gt;

&lt;h2 id=&quot;task-lists&quot;&gt;Task lists&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;[x] @mentions, #refs, &lt;a href=&quot;&quot;&gt;links&lt;/a&gt;, &lt;strong&gt;formatting&lt;/strong&gt; and &lt;del&gt;tags&lt;/del&gt; supported&lt;/li&gt;
  &lt;li&gt;[x] list syntax required (and undered of ordered list supported)&lt;/li&gt;
  &lt;li&gt;[x] this is a complete item&lt;/li&gt;
  &lt;li&gt;[ ] this is an imcomplete item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you include a task list in the first comment of an Issue, you will get a handy progress indicator in your issue list.
it al works in Pull Request!&lt;/p&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;
&lt;p&gt;You can create tables by accsembling a list of world and divdding them with hyphenes &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; (for the first row), and them separating each column with a pipe |:
First Header | Second Headler
————  —————-
Content from ceil 1 Content from call be
Content in the first column |Content in the restorigin)&lt;/p&gt;

&lt;p&gt;안정적인 효과가 있음&lt;/p&gt;

</description>
        <pubDate>Thu, 21 Jul 2016 00:00:00 +0900</pubDate>
        <link>http://unclebae.github.io/2016/07/21/markdown.html</link>
        <guid isPermaLink="true">http://unclebae.github.io/2016/07/21/markdown.html</guid>
        
        
      </item>
    
  </channel>
</rss>
